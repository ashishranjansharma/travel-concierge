version: '3.8'

services:
  travel-concierge:
    build: .
    container_name: travel-concierge
    ports:
      - "8000:8000"
    environment:
      # Model Backend Configuration
      - GOOGLE_GENAI_USE_VERTEXAI=${GOOGLE_GENAI_USE_VERTEXAI:-1}
      
      # ML Dev backend config (when GOOGLE_GENAI_USE_VERTEXAI=0)
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      
      # Vertex backend config
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GOOGLE_CLOUD_LOCATION=${GOOGLE_CLOUD_LOCATION:-us-central1}
      
      # Places API
      - GOOGLE_PLACES_API_KEY=${GOOGLE_PLACES_API_KEY}
      
      # GCS Storage Bucket name
      - GOOGLE_CLOUD_STORAGE_BUCKET=${GOOGLE_CLOUD_STORAGE_BUCKET}
      
      # Sample Scenario Path
      - TRAVEL_CONCIERGE_SCENARIO=${TRAVEL_CONCIERGE_SCENARIO:-travel_concierge/profiles/itinerary_empty_default.json}
      
      # Server configuration
      - HOST=0.0.0.0
      - PORT=8000
    volumes:
      # Mount Google Cloud credentials if using service account key file
      - ${GOOGLE_APPLICATION_CREDENTIALS:-./credentials.json}:/app/credentials.json:ro
      # Mount scenario files for easy customization
      - ./travel_concierge/profiles:/app/travel_concierge/profiles:ro
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Add a reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: travel-concierge-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - travel-concierge
    restart: unless-stopped
    profiles:
      - production

networks:
  default:
    name: travel-concierge-network
